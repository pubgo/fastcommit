package genversion

import (
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/dave/jennifer/jen"
	"github.com/pubgo/fastcommit/utils"
)

func Gen(path string, version string) {
	pathDir := filepath.Dir(path)
	assert.Must(pathutil.IsNotExistMkDir(pathDir))

	genFile := jen.NewFile("version")
	genFile.HeaderComment("Code generated by version. DO NOT EDIT.")
	genFile.HeaderComment("Code generated by version. DO NOT EDIT.")
	genFile.HeaderComment("Code generated by version. DO NOT EDIT.")

	//// git rev-parse HEAD
	//// git describe --always --abbrev=7 --dirty
	//var (
	//	commitID  string
	//	buildTime string
	//	version   = "v0.0.1-dev-99"
	//	project   = "project"
	//)
	//
	//// git describe --tags --abbrev=0
	//// git tag --sort=committerdate | tail -n 1

	genFile.Const().Id("CommitID").Op("=").Lit("123")
	genFile.Const().Id("BuildTime").Op("=").Lit(time.Now().UTC().Format(time.RFC3339))
	genFile.Const().Id("Version").Op("=").Lit(strings.TrimSpace(version))
	genFile.Const().Id("Branch").Op("=").Lit(strings.TrimSpace(utils.GetCurrentBranch().Must()))
	genFile.Const().Id("Project").Op("=").Lit("ffff")

	assert.Must(os.WriteFile(path, []byte(genFile.GoString()), 0644))
}
